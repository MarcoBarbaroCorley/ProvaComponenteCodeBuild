AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Creazione EKS con due nodi
Parameters:

  ProjectName:
    Type: String
  Environment:
    Type: String
  VPCId:
    Type: String
  SubnetPrivate1:
    Type: String
  SubnetPrivate2:
    Type: String
  AmiType:
    Type: String
  InstanceType:
    Type: String
  GroupName1:
    Type: String
  GroupName2:
    Type: String
  InstanceType2:
    Type: String
  KubernetesVersion:
    Type: String

Resources:

  EksSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: App security group
      Tags:
        - Key: Name
          Value: !Sub eks-sg-${ProjectName}-${Environment}
      VpcId: !Ref VPCId

  ClusterRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - eks.amazonaws.com
          Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
        - "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        - "arn:aws:iam::aws:policy/aws-service-role/AmazonSSMServiceRolePolicy"

  Cluster:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: !Sub ${ProjectName}-${Environment}
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt ClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EksSG
        SubnetIds:
          - !Ref SubnetPrivate1
          - !Ref SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}

  EKSUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub plc-${Environment}-user-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - eks:DescribeCluster
            Resource: !Sub ${Cluster.Arn}

  NodeInstanceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonRoute53FullAccess"
      Path: /
      RoleName: rle-NodeIstanceRole

  EKSNodegroup1:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      ClusterName: !Ref Cluster
      AmiType: !Ref AmiType
      InstanceTypes: 
        - !Ref InstanceType
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 3
      Subnets:
        - !Ref SubnetPrivate1
        - !Ref SubnetPrivate2
      NodegroupName: !Ref GroupName1

  EKSNodegroup2:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      ClusterName: !Ref Cluster
      AmiType: !Ref AmiType
      InstanceTypes: 
        - !Ref InstanceType2
      NodeRole: !GetAtt NodeInstanceRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 3
      Subnets:
        - !Ref SubnetPrivate1
        - !Ref SubnetPrivate2
      NodegroupName: !Ref GroupName2

  SecurityGroupEks:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group EKS
      GroupName: !Sub sg-eks-${ProjectName}-${Environment}
      VpcId: !Ref VPCId

Outputs:
  ClusterEKSId:
    Description: Cluester EKS Id
    Value: !Ref Cluster
  EKSNodeGroup1Id:
    Description: NodeGroup1 Id
    Value: !Ref EKSNodegroup1
  EKSNodeGroup2Id:
    Description: NodeGroup2 Id
    Value: !Ref EKSNodegroup2